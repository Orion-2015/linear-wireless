///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        11/Aug/2012  13:38:21 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\linear-wireless\Components\simpliciti\nwk\nwk. /
//                          c                                                 /
//    Command line       =  -f E:\linear-wireless\Projects\Examples\SRF04\Cas /
//                          cading_End_Devices\IAR\Configuration\End_Device\s /
//                          mpl_config.dat (-DNUM_CONNECTIONS=2               /
//                          -DSIZE_INFRAME_Q=5 -DSIZE_OUTFRAME_Q=1            /
//                          -DEND_DEVICE -DFWVERSION=2) -f                    /
//                          E:\linear-wireless\Projects\Examples\SRF04\Cascad /
//                          ing_End_Devices\IAR\Configuration\smpl_nwk_config /
//                          .dat (-DMAX_HOPS=3 -DMAX_HOPS_FROM_ME=3           /
//                          -DCOMMAND_SIZE=10 -DLOGTEMP_SIZE=100              /
//                          -DMAX_HOPS_FROM_AP=1 -DMAX_NWK_PAYLOAD=34         /
//                          -DMAX_APP_PAYLOAD=50 -DDEFAULT_LINK_TOKEN=0x01020 /
//                          304 -DDEFAULT_JOIN_TOKEN=0x05060708               /
//                          -DxFREQUENCY_AGILITY -DAPP_AUTO_ACK               /
//                          -DxEXTENDED_API -DxSMPL_SECURE                    /
//                          -DxNVOBJECT_SUPPORT -DxSW_TIMER                   /
//                          -DxFREQUENCY_HOPPING -DNWK_PLL_REFERENCE_CLOCK    /
//                          -DBSP_TIMER_USED=1 -DNWK_PLL_SHOW_LOCATION_INDICA /
//                          TORS -DUART_NUMBER=UART_NUMBER_0                  /
//                          -DUART_LOCATION=UART_LOCATION_1                   /
//                          -DUART_BAUD_RATE=19200 -DUART_FLOW_CONTROL=UART_F /
//                          LOW_CONTROL_OFF -DUART_PARITY_MODE=UART_PARITY_NO /
//                          NE -DUART_STOP_BITS=UART_1_STOP_BIT -DCOMDEBUG)   /
//                          -DLOGINFO E:\linear-wireless\Components\simplicit /
//                          i\nwk\nwk.c -D MCU_H=<ioCC1110.h> -D MRFI_CC1110  /
//                          -lb E:\linear-wireless\Projects\Examples\SRF04\Ca /
//                          scading_End_Devices\IAR\CC1110-EndDevice\List\    /
//                          -o E:\linear-wireless\Projects\Examples\SRF04\Cas /
//                          cading_End_Devices\IAR\CC1110-EndDevice\Obj\ -e   /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=near              /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 8 -I     /
//                          E:\linear-wireless\Projects\Examples\SRF04\Cascad /
//                          ing_End_Devices\IAR\..\..\..\..\..\Components\bsp /
//                          \ -I E:\linear-wireless\Projects\Examples\SRF04\C /
//                          ascading_End_Devices\IAR\..\..\..\..\..\Component /
//                          s\bsp\drivers\ -I E:\linear-wireless\Projects\Exa /
//                          mples\SRF04\Cascading_End_Devices\IAR\..\..\..\.. /
//                          \..\Components\bsp\boards\SRF04EB\ -I             /
//                          E:\linear-wireless\Projects\Examples\SRF04\Cascad /
//                          ing_End_Devices\IAR\..\..\..\..\..\Components\mrf /
//                          i\ -I E:\linear-wireless\Projects\Examples\SRF04\ /
//                          Cascading_End_Devices\IAR\..\..\..\..\..\Componen /
//                          ts\SimpliciTI\nwk\ -I E:\linear-wireless\Projects /
//                          \Examples\SRF04\Cascading_End_Devices\IAR\..\..\. /
//                          .\..\..\Components\SimpliciTI\nwk_applications\   /
//                          -I E:\linear-wireless\Projects\Examples\SRF04\Cas /
//                          cading_End_Devices\IAR\..\..\..\..\..\Components\ /
//                          ApplicationFramework\ -Ohz                        /
//    List file          =  E:\linear-wireless\Projects\Examples\SRF04\Cascad /
//                          ing_End_Devices\IAR\CC1110-EndDevice\List\nwk.s51 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME nwk

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC getAckFlag
        PUBLIC nwk_NVObj
        PUBLIC nwk_allocateLocalRxPort
        PUBLIC nwk_checkAppMsgTID
        PUBLIC nwk_checkConnInfo
        PUBLIC nwk_findAddressMatch
        PUBLIC nwk_findPeer
        PUBLIC nwk_freeConnection
        PUBLIC nwk_getConnInfo
        PUBLIC nwk_getNextConnection
        PUBLIC nwk_getNumObjectFromMsg
        PUBLIC nwk_isConnectionValid
        PUBLIC nwk_isLinkDuplicate
        PUBLIC nwk_isValidReply
        PUBLIC nwk_nwkInit
        PUBLIC nwk_putNumObjectIntoMsg

        EXTERN memset
        EXTERN nwk_globalsInit
        EXTERN nwk_frameInit
        EXTERN nwk_QInit
        EXTERN nwk_freqInit
        EXTERN nwk_pingInit
        EXTERN nwk_joinInit
        EXTERN nwk_mgmtInit
        EXTERN nwk_linkInit
        EXTERN nwk_securityInit
        EXTERN nwk_getBCastAddress
        EXTERN memcpy
        EXTERN memcmp
        EXTERN nwk_sendAckReply
        EXTERN MRFI_PostKillSem
        EXTERN nwk_getMyAddress
        EXTERN memmove


        RSEG XDATA_I:XDATA:NOROOT(0)
sPersistInfo:
        DATA8
        DS 32
        REQUIRE `?<Initializer for sPersistInfo>`
        REQUIRE __INIT_XDATA_I

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_nwkInit:
        CODE
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x1f
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#(sPersistInfo + 1) & 0xff
        MOV     R3,#((sPersistInfo + 1) >> 8) & 0xff
        LCALL   memset
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        MOV     DPTR,#sPersistInfo + 1
        MOV     A,#0x3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x3d
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x20
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function nwk_globalsInit
        LCALL   nwk_globalsInit
        ; Setup parameters for call to function nwk_frameInit
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   nwk_frameInit
        ; Setup parameters for call to function nwk_QInit
        LCALL   nwk_QInit
        ; Setup parameters for call to function nwk_freqInit
        LCALL   nwk_freqInit
        ; Setup parameters for call to function nwk_pingInit
        LCALL   nwk_pingInit
        ; Setup parameters for call to function nwk_joinInit
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   nwk_joinInit
        ; Setup parameters for call to function nwk_mgmtInit
        LCALL   nwk_mgmtInit
        ; Setup parameters for call to function nwk_linkInit
        LCALL   nwk_linkInit
        ; Setup parameters for call to function nwk_securityInit
        LCALL   nwk_securityInit
        MOV     DPTR,#sPersistInfo + 23
        MOVX    A,@DPTR
        JNZ     ??nwk_nwkInit_0
        MOV     A,#0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
        MOV     DPTR,#sPersistInfo + 29
        MOV     A,#0x3f
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        ; Setup parameters for call to function nwk_getBCastAddress
        LCALL   nwk_getBCastAddress
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#(sPersistInfo + 26) & 0xff
        MOV     R3,#((sPersistInfo + 26) >> 8) & 0xff
        LCALL   memcpy
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
??nwk_nwkInit_0:
        MOV     DPTR,#sPersistInfo + 14
        MOVX    A,@DPTR
        JNZ     ??nwk_nwkInit_1
        MOV     A,#0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
        MOV     DPTR,#sPersistInfo + 20
        MOV     A,#0x3e
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x2
        MOVX    @DPTR,A
??nwk_nwkInit_1:
        MOV     R1,#0x0
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_getNextConnection:
        CODE
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 8
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        MOV     R3,#0x0
??nwk_getNextConnection_0:
        MOV     A,R3
        LCALL   ?Subroutine5
??CrossCallReturnLabel_0:
        JNZ     ??nwk_getNextConnection_1
        INC     R3
        MOV     A,R3
        CLR     C
        SUBB    A,#0x3
        JC      ??nwk_getNextConnection_0
??nwk_getNextConnection_1:
        MOV     A,#0x3
        XRL     A,R3
        JNZ     ??nwk_getNextConnection_2
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??nwk_getNextConnection_3
??nwk_getNextConnection_2:
        MOV     A,R3
        MOV     B,#0x9
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(sPersistInfo + 5) & 0xff
        ADD     A,R0
        MOV     R6,A
        MOV     A,#((sPersistInfo + 5) >> 8) & 0xff
        ADDC    A,R1
        MOV     R7,A
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPTR,#sPersistInfo + 4
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
??nwk_getNextConnection_4:
        MOV     DPTR,#sPersistInfo + 4
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        MOVX    A,@DPTR
        MOV     R1,A
        JZ      ??nwk_getNextConnection_4
        MOV     A,#-0x1
        XRL     A,R1
        JZ      ??nwk_getNextConnection_4
        ; Setup parameters for call to function map_lid2idx
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   map_lid2idx
        MOV     A,R1
        JNZ     ??nwk_getNextConnection_4
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
??nwk_getNextConnection_3:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine0:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG NEAR_CODE:CODE:NOROOT(0)
??Subroutine12_0:
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_freeConnection:
        CODE
        PUSH    DPL
        PUSH    DPH
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
        MOVX    @DPTR,A
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine1:
        POP     DPH
        POP     DPL
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_getConnInfo:
        CODE
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 8
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        ; Setup parameters for call to function map_lid2idx
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   map_lid2idx
        MOV     A,R1
        JZ      ??nwk_getConnInfo_0
        MOVX    A,@DPTR
        LCALL   ?Subroutine5
??CrossCallReturnLabel_1:
        JZ      ??nwk_getConnInfo_1
??nwk_getConnInfo_0:
        MOV     DPL,#0x0
        MOV     DPH,#0x0
??nwk_getConnInfo_1:
        MOV     R2,DPL
        MOV     R3,DPH
        SJMP    ?Subroutine0

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine5:
        MOV     B,#0x9
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(sPersistInfo + 5) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((sPersistInfo + 5) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x2
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_isLinkDuplicate:
        CODE
        MOV     A,#-0xd
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 1,R1
        MOV     R6,#(sPersistInfo + 5) & 0xff
        MOV     R7,#((sPersistInfo + 5) >> 8) & 0xff
        MOV     ?V0 + 0,#0x2
??nwk_isLinkDuplicate_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??nwk_isLinkDuplicate_1
        ; Setup parameters for call to function memcmp
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        LCALL   ??Subroutine13_0
??CrossCallReturnLabel_14:
        LCALL   ?DEALLOC_XSTACK8
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JNZ     ??nwk_isLinkDuplicate_1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
        JNZ     ??nwk_isLinkDuplicate_1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??nwk_isLinkDuplicate_2
??nwk_isLinkDuplicate_1:
        LCALL   ?Subroutine7
??CrossCallReturnLabel_2:
        JNZ     ??nwk_isLinkDuplicate_0
        MOV     R2,#0x0
        MOV     R3,#0x0
??nwk_isLinkDuplicate_2:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine2:
        MOV     R7,#0x6
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_findAddressMatch:
        CODE
        MOV     A,#-0xd
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,#(sPersistInfo + 5) & 0xff
        MOV     R7,#((sPersistInfo + 5) >> 8) & 0xff
        MOV     ?V0 + 0,#0x2
??nwk_findAddressMatch_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??nwk_findAddressMatch_1
        ; Setup parameters for call to function memcmp
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,?V0 + 3
        LCALL   ?Subroutine6
??CrossCallReturnLabel_12:
        LCALL   ?DEALLOC_XSTACK8
        MOV     ?V0 + 5,R3
        MOV     A,R2
        ORL     A,?V0 + 5
        JNZ     ??nwk_findAddressMatch_1
        MOV     R1,#0x1
        SJMP    ??nwk_findAddressMatch_2
??nwk_findAddressMatch_1:
        LCALL   ?Subroutine7
??CrossCallReturnLabel_3:
        JNZ     ??nwk_findAddressMatch_0
        MOV     R1,#0x0
??nwk_findAddressMatch_2:
        SJMP    ?Subroutine2

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine7:
        LCALL   ?Subroutine10
??CrossCallReturnLabel_11:
        DEC     ?V0 + 0
        MOV     A,?V0 + 0
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine6:
        ADDC    A,#0x0
        MOV     R5,A
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG NEAR_CODE:CODE:NOROOT(0)
??Subroutine13_0:
        MOV     A,R6
        ADD     A,#0x3
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ?Subroutine11
??CrossCallReturnLabel_15:
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine11:
        LCALL   memcmp
        MOV     A,#0x2
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_checkConnInfo:
        CODE
        PUSH    DPL
        PUSH    DPH
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     DPL,R2
        MOV     DPH,R3
        JZ      ??nwk_checkConnInfo_0
        INC     DPTR
??nwk_checkConnInfo_0:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R1
        JZ      ??nwk_checkConnInfo_1
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??nwk_checkConnInfo_2
??nwk_checkConnInfo_1:
        MOV     R1,#0x2
        SJMP    ??nwk_checkConnInfo_3
??nwk_checkConnInfo_2:
        MOV     A,R1
        CLR     C
        SUBB    A,#0x20
        JC      ??nwk_checkConnInfo_1
        MOV     R1,#0x0
??nwk_checkConnInfo_3:
        LJMP    ?Subroutine1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
getAckFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_isConnectionValid:
        CODE
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 15
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,#(sPersistInfo + 5) & 0xff
        MOV     R7,#((sPersistInfo + 5) >> 8) & 0xff
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x3f
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x3
??nwk_isConnectionValid_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??nwk_isConnectionValid_1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 2
        JZ      $+5
        LJMP    ??nwk_isConnectionValid_1
        MOV     A,R6
        ADD     A,#0x3
        MOV     ?V0 + 6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     A,#0x3e
        XRL     A,?V0 + 2
        JNZ     ??nwk_isConnectionValid_2
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        LCALL   ?Subroutine9
??CrossCallReturnLabel_7:
        LCALL   memcpy
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        SJMP    ??nwk_isConnectionValid_3
??nwk_isConnectionValid_2:
        MOV     A,#0x3f
        XRL     A,?V0 + 2
        JZ      ??nwk_isConnectionValid_4
??nwk_isConnectionValid_3:
        ; Setup parameters for call to function memcmp
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        LCALL   ?Subroutine9
??CrossCallReturnLabel_8:
        LCALL   ?Subroutine11
??CrossCallReturnLabel_16:
        LCALL   ?DEALLOC_XSTACK8
        MOV     ?V0 + 5,R3
        MOV     A,R2
        ORL     A,?V0 + 5
        JZ      $+5
        LJMP    ??nwk_isConnectionValid_1
??nwk_isConnectionValid_4:
        MOV     ?V0 + 3,#0x1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        POP     A
        MOVX    @DPTR,A
        MOV     A,#0x3f
        XRL     A,?V0 + 2
        JZ      ??nwk_isConnectionValid_5
        MOV     A,?V0 + 0
        ADD     A,#0x4
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??nwk_isConnectionValid_6
        ; Setup parameters for call to function nwk_sendAckReply
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   nwk_sendAckReply
        SJMP    ??nwk_isConnectionValid_5
??nwk_isConnectionValid_6:
        MOV     C,0xE0 /* A   */.3
        JNC     ??nwk_isConnectionValid_5
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??nwk_isConnectionValid_7
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#getAckFlag
        INC     A
        MOVX    @DPTR,A
??nwk_isConnectionValid_7:
        MOV     ?V0 + 3,#0x0
??nwk_isConnectionValid_5:
        ; Setup parameters for call to function MRFI_PostKillSem
        LCALL   MRFI_PostKillSem
        MOV     R1,?V0 + 3
        SJMP    ??nwk_isConnectionValid_8
??nwk_isConnectionValid_1:
        LCALL   ?Subroutine10
??CrossCallReturnLabel_9:
        DEC     ?V0 + 3
        MOV     A,?V0 + 3
        JZ      $+5
        LJMP    ??nwk_isConnectionValid_0
        MOV     R1,#0x0
??nwk_isConnectionValid_8:
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine3:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        MOV     R7,#0x8
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine10:
        MOV     A,R6
        ADD     A,#0x9
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine9:
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_allocateLocalRxPort:
        CODE
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 15
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,#(sPersistInfo + 5) & 0xff
        MOV     R7,#((sPersistInfo + 5) >> 8) & 0xff
        ; Setup parameters for call to function memset
        MOV     ?V0 + 2,#0x2
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   memset
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        MOV     ?V0 + 1,#0x2
??nwk_allocateLocalRxPort_0:
        MOV     A,?V0 + 4
        XRL     A,R6
        JNZ     ??nwk_allocateLocalRxPort_1
        MOV     A,?V0 + 5
        XRL     A,R7
??nwk_allocateLocalRxPort_1:
        JNZ     $+5
        LJMP    ??nwk_allocateLocalRxPort_2
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??nwk_allocateLocalRxPort_2
        MOV     A,R6
        ADD     A,#0x6
        MOV     ?V0 + 6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     DPL,?V0 + 6
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     C
        SUBB    A,#0x3e
        JNC     ??nwk_allocateLocalRxPort_2
        MOV     A,#0x1
        XRL     A,?V0 + 0
        JNZ     ??nwk_allocateLocalRxPort_3
        MOV     DPTR,#sPersistInfo + 2
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JNC     ??nwk_allocateLocalRxPort_2
        CLR     C
        CLR     A
        SUBB    A,R0
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x3d
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        SJMP    ??nwk_allocateLocalRxPort_4
??nwk_allocateLocalRxPort_3:
        ; Setup parameters for call to function memcmp
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,?V0 + 4
        ADD     A,#0x3
        MOV     R4,A
        MOV     A,?V0 + 5
        LCALL   ?Subroutine6
??CrossCallReturnLabel_13:
        LCALL   ?DEALLOC_XSTACK8
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JNZ     ??nwk_allocateLocalRxPort_2
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x20
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
??nwk_allocateLocalRxPort_4:
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
??nwk_allocateLocalRxPort_2:
        LCALL   ?Subroutine10
??CrossCallReturnLabel_10:
        DEC     ?V0 + 1
        MOV     A,?V0 + 1
        JZ      $+5
        LJMP    ??nwk_allocateLocalRxPort_0
        MOV     R1,#0x0
        MOV     R0,#0x0
??nwk_allocateLocalRxPort_5:
        MOV     ?V0 + 2,R0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??nwk_allocateLocalRxPort_6
        MOV     A,#0x2
        XRL     A,?V0 + 0
        JNZ     ??nwk_allocateLocalRxPort_7
        MOV     A,#0x20
        ADD     A,R0
        MOV     R1,A
        SJMP    ??nwk_allocateLocalRxPort_8
??nwk_allocateLocalRxPort_7:
        MOV     A,#0x3d
        CLR     C
        SUBB    A,R0
        MOV     R1,A
??nwk_allocateLocalRxPort_9:
        MOV     DPTR,#sPersistInfo + 3
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R1
        CLR     C
        SUBB    A,R0
        JC      ??nwk_allocateLocalRxPort_10
        MOV     DPTR,#sPersistInfo + 2
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     ??nwk_allocateLocalRxPort_11
        MOVX    A,@DPTR
        DEC     A
??nwk_allocateLocalRxPort_12:
        MOVX    @DPTR,A
??nwk_allocateLocalRxPort_11:
        MOV     A,R1
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        LJMP    ?Subroutine3
??nwk_allocateLocalRxPort_6:
        INC     R0
        MOV     A,R0
        CLR     C
        SUBB    A,#0x2
        JC      ??nwk_allocateLocalRxPort_5
        MOV     A,#0x2
        XRL     A,?V0 + 0
        JNZ     ??nwk_allocateLocalRxPort_9
??nwk_allocateLocalRxPort_8:
        MOV     DPTR,#sPersistInfo + 2
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R1
        JC      ??nwk_allocateLocalRxPort_10
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R1
        JNC     ??nwk_allocateLocalRxPort_11
        MOV     A,R1
        SJMP    ??nwk_allocateLocalRxPort_12
??nwk_allocateLocalRxPort_10:
        MOV     R1,#0x0
        SJMP    ??nwk_allocateLocalRxPort_11

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_isValidReply:
        CODE
        MOV     A,#-0xc
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 4,R1
        MOV     R1,#0x2
        MOV     ?V0 + 2,R4
        LCALL   ?Subroutine8
??CrossCallReturnLabel_5:
        MOV     C,0xE0 /* A   */.7
        JNC     ??nwk_isValidReply_0
        MOV     ?V0 + 2,R5
        LCALL   ?Subroutine8
??CrossCallReturnLabel_6:
        XRL     A,?V0 + 4
        JNZ     ??nwk_isValidReply_1
        ; Setup parameters for call to function memcmp
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        ; Setup parameters for call to function nwk_getMyAddress
        LCALL   nwk_getMyAddress
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ?Subroutine11
??CrossCallReturnLabel_17:
        LCALL   ?DEALLOC_XSTACK8
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JNZ     ??nwk_isValidReply_1
        MOV     R1,#0x0
        SJMP    ??nwk_isValidReply_0
??nwk_isValidReply_1:
        MOV     R1,#0x1
??nwk_isValidReply_0:
        MOV     R7,#0x5
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine8:
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
map_lid2idx:
        CODE
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R1
        MOV     R5,A
        MOV     R0,#(sPersistInfo + 5) & 0xff
        MOV     R1,#((sPersistInfo + 5) >> 8) & 0xff
        MOV     R4,#0x0
??map_lid2idx_0:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??map_lid2idx_1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
        JNZ     ??map_lid2idx_1
        MOV     A,R4
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        MOV     R1,#0x1
        SJMP    ??map_lid2idx_2
??map_lid2idx_1:
        INC     R4
        MOV     A,R0
        ADD     A,#0x9
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R4
        CLR     C
        SUBB    A,#0x3
        JC      ??map_lid2idx_0
        MOV     R1,#0x0
??map_lid2idx_2:
        LJMP    ??Subroutine12_0

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_findPeer:
        CODE
        MOV     A,#-0xd
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 1,R1
        MOV     R6,#(sPersistInfo + 5) & 0xff
        MOV     R7,#((sPersistInfo + 5) >> 8) & 0xff
        MOV     ?V0 + 0,#0x3
??nwk_findPeer_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??nwk_findPeer_1
        ; Setup parameters for call to function memcmp
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,R6
        ADD     A,#0x3
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ?Subroutine11
??CrossCallReturnLabel_18:
        LCALL   ?DEALLOC_XSTACK8
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JNZ     ??nwk_findPeer_1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
        JNZ     ??nwk_findPeer_1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??nwk_findPeer_2
??nwk_findPeer_1:
        LCALL   ?Subroutine7
??CrossCallReturnLabel_4:
        JNZ     ??nwk_findPeer_0
        MOV     R2,#0x0
        MOV     R3,#0x0
??nwk_findPeer_2:
        LJMP    ?Subroutine2

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_checkAppMsgTID:
        CODE
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R2
        XRL     A,R0
        JZ      ??nwk_checkAppMsgTID_0
        MOV     A,R0
        CLR     C
        SUBB    A,R2
        JNC     ??nwk_checkAppMsgTID_1
        MOV     A,R2
        CLR     C
        SUBB    A,#-0x3
        JC      ??nwk_checkAppMsgTID_2
        MOV     A,R0
        CLR     C
        SUBB    A,#0x3
        JC      ??nwk_checkAppMsgTID_0
??nwk_checkAppMsgTID_2:
        INC     R1
        RET
??nwk_checkAppMsgTID_1:
        MOV     A,R0
        CLR     C
        SUBB    A,#-0x3
        JC      ??nwk_checkAppMsgTID_0
        MOV     A,R2
        CLR     C
        SUBB    A,#0x3
        JC      ??nwk_checkAppMsgTID_2
??nwk_checkAppMsgTID_0:
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_getNumObjectFromMsg:
        CODE
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V0 + 0,R1
        ; Setup parameters for call to function memmove
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   memmove
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        MOV     A,?V0 + 0
        ADD     A,#-0x2
        JZ      ??nwk_getNumObjectFromMsg_0
        ADD     A,#-0x2
        JZ      ??nwk_getNumObjectFromMsg_1
        SJMP    ??nwk_getNumObjectFromMsg_2
??nwk_getNumObjectFromMsg_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        SJMP    ??nwk_getNumObjectFromMsg_2
??nwk_getNumObjectFromMsg_1:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?XLOAD_R2345
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?XSTORE_R2345
??nwk_getNumObjectFromMsg_2:
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine4:
        MOV     R7,#0x4
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_putNumObjectIntoMsg:
        CODE
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 11
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,R1
        MOV     R6,A
        ADD     A,#-0x2
        JZ      ??nwk_putNumObjectIntoMsg_0
        ADD     A,#-0x2
        JZ      ??nwk_putNumObjectIntoMsg_1
        SJMP    ??nwk_putNumObjectIntoMsg_2
??nwk_putNumObjectIntoMsg_0:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??nwk_putNumObjectIntoMsg_2
??nwk_putNumObjectIntoMsg_1:
        LCALL   ?XLOAD_R2345
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
??nwk_putNumObjectIntoMsg_2:
        MOV     R4,DPL
        MOV     R5,DPH
        ; Setup parameters for call to function memmove
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   memmove
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        SJMP    ?Subroutine4

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_NVObj:
        CODE
        ; Saved register size: 0
        ; Auto size: 0
        MOV     R1,#0x2
        RET

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sPersistInfo>`:
        DATA8
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        END
// 
// 1 787 bytes in segment NEAR_CODE
//    32 bytes in segment XDATA_I
//    32 bytes in segment XDATA_ID
//     1 byte  in segment XDATA_Z
// 
// 1 819 bytes of CODE  memory
//    33 bytes of XDATA memory
//
//Errors: none
//Warnings: none
