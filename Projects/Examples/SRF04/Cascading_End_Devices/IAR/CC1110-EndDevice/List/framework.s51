///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        12/Aug/2012  18:09:35 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\linear-wireless\Components\ApplicationFramewor /
//                          k\framework.c                                     /
//    Command line       =  -f E:\linear-wireless\Projects\Examples\SRF04\Cas /
//                          cading_End_Devices\IAR\Configuration\End_Device\s /
//                          mpl_config.dat (-DNUM_CONNECTIONS=2               /
//                          -DSIZE_INFRAME_Q=5 -DSIZE_OUTFRAME_Q=1            /
//                          -DEND_DEVICE -DFWVERSION=2) -f                    /
//                          E:\linear-wireless\Projects\Examples\SRF04\Cascad /
//                          ing_End_Devices\IAR\Configuration\smpl_nwk_config /
//                          .dat (-DMAX_HOPS=3 -DMAX_HOPS_FROM_ME=3           /
//                          -DCOMMAND_SIZE=10 -DLOGTEMP_SIZE=100              /
//                          -DMAX_HOPS_FROM_AP=1 -DMAX_NWK_PAYLOAD=34         /
//                          -DMAX_APP_PAYLOAD=50 -DDEFAULT_LINK_TOKEN=0x01020 /
//                          304 -DDEFAULT_JOIN_TOKEN=0x05060708               /
//                          -DxFREQUENCY_AGILITY -DAPP_AUTO_ACK               /
//                          -DxEXTENDED_API -DxSMPL_SECURE                    /
//                          -DxNVOBJECT_SUPPORT -DxSW_TIMER                   /
//                          -DxFREQUENCY_HOPPING -DNWK_PLL_REFERENCE_CLOCK    /
//                          -DBSP_TIMER_USED=1 -DNWK_PLL_SHOW_LOCATION_INDICA /
//                          TORS -DUART_NUMBER=UART_NUMBER_0                  /
//                          -DUART_LOCATION=UART_LOCATION_1                   /
//                          -DUART_BAUD_RATE=19200 -DUART_FLOW_CONTROL=UART_F /
//                          LOW_CONTROL_OFF -DUART_PARITY_MODE=UART_PARITY_NO /
//                          NE -DUART_STOP_BITS=UART_1_STOP_BIT -DCOMDEBUG)   /
//                          -DLOGINFO E:\linear-wireless\Components\Applicati /
//                          onFramework\framework.c -D MCU_H=<ioCC1110.h> -D  /
//                          MRFI_CC1110 -lb E:\linear-wireless\Projects\Examp /
//                          les\SRF04\Cascading_End_Devices\IAR\CC1110-EndDev /
//                          ice\List\ -o E:\linear-wireless\Projects\Examples /
//                          \SRF04\Cascading_End_Devices\IAR\CC1110-EndDevice /
//                          \Obj\ -e --debug --core=plain --dptr=16,1         /
//                          --data_model=large --code_model=near              /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 8 -I     /
//                          E:\linear-wireless\Projects\Examples\SRF04\Cascad /
//                          ing_End_Devices\IAR\..\..\..\..\..\Components\bsp /
//                          \ -I E:\linear-wireless\Projects\Examples\SRF04\C /
//                          ascading_End_Devices\IAR\..\..\..\..\..\Component /
//                          s\bsp\drivers\ -I E:\linear-wireless\Projects\Exa /
//                          mples\SRF04\Cascading_End_Devices\IAR\..\..\..\.. /
//                          \..\Components\bsp\boards\SRF04EB\ -I             /
//                          E:\linear-wireless\Projects\Examples\SRF04\Cascad /
//                          ing_End_Devices\IAR\..\..\..\..\..\Components\mrf /
//                          i\ -I E:\linear-wireless\Projects\Examples\SRF04\ /
//                          Cascading_End_Devices\IAR\..\..\..\..\..\Componen /
//                          ts\SimpliciTI\nwk\ -I E:\linear-wireless\Projects /
//                          \Examples\SRF04\Cascading_End_Devices\IAR\..\..\. /
//                          .\..\..\Components\SimpliciTI\nwk_applications\   /
//                          -I E:\linear-wireless\Projects\Examples\SRF04\Cas /
//                          cading_End_Devices\IAR\..\..\..\..\..\Components\ /
//                          ApplicationFramework\ -Ohz                        /
//    List file          =  E:\linear-wireless\Projects\Examples\SRF04\Cascad /
//                          ing_End_Devices\IAR\CC1110-EndDevice\List\framewo /
//                          rk.s51                                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME framework

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK __Constant_1
        PUBLIC callApplication
        PUBLIC checkButton
        PUBLIC checkFlag
        PUBLIC checkRF
        PUBLIC checkUART
        PUBLIC consoleAP
        PUBLIC debug
        PUBLIC fowardFrame
        PUBLIC framework_entry
        PUBLIC getLogInfor
        PUBLIC handleRF
        PUBLIC initOS
        PUBLIC pInframe
        PUBLIC registerTask
        PUBLIC runOS
        PUBLIC send2Computer
        PUBLIC sendTest2AP

        EXTERN printf
        EXTERN send
        EXTERN getMyAddress
        EXTERN putchar
        EXTERN putstr
        EXTERN sprintf
        EXTERN strlen
        EXTERN memcpy
        EXTERN log
        EXTERN receive
        EXTERN getRcText
        EXTERN rx_receive_line
        EXTERN puthex
        EXTERN channelHandle
        EXTERN detect
        EXTERN getAckFlag
        EXTERN getLogHandle
        EXTERN getStationDataHandle
        EXTERN getSurplusChargeHandle
        EXTERN getTestHandle
        EXTERN logLevelHandle
        EXTERN logTemp
        EXTERN roomFlag
        EXTERN rx
        EXTERN scan
        EXTERN tx


        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
taskList:
        DS 40
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
pInframe:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
sendTimes:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
successTimes:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
failTimes:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
checkFlag:
        CODE
        PUSH    DPL
        PUSH    DPH
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#roomFlag
        MOVX    A,@DPTR
        JNZ     ??checkFlag_0
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "no room in last recei...">` & 0xff
        MOV     R3,#(`?<Constant "no room in last recei...">` >> 8) & 0xff
        LCALL   printf
        MOV     A,#0x1
        MOVX    @DPTR,A
??checkFlag_0:
        MOV     DPTR,#getAckFlag
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??checkFlag_1
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "i get ack------------...">` & 0xff
        MOV     R3,#(`?<Constant "i get ack------------...">` >> 8) & 0xff
        LCALL   printf
        CLR     A
        MOVX    @DPTR,A
??checkFlag_1:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine0:
        POP     DPH
        POP     DPL
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
registerTask:
        CODE
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R5,A
        CLR     C
        SUBB    A,#0xa
        JC      ??registerTask_0
        MOV     R1,#0x0
        SJMP    ??registerTask_1
??registerTask_0:
        MOV     ?V0 + 0,R5
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#taskList & 0xff
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,#(taskList >> 8) & 0xff
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    @DPTR,A
        MOV     R1,#0x1
??registerTask_1:
        LJMP    ?Subroutine1

        RSEG NEAR_CODE:CODE:NOROOT(0)
fowardFrame:
        CODE
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function send
        MOV     R1,#0x3a
        LJMP    send

        RSEG NEAR_CODE:CODE:NOROOT(0)
initOS:
        CODE
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 0
        MOV     R1,#0x0
??initOS_0:
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#(taskList + 2) & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#((taskList + 2) >> 8) & 0xff
        ADDC    A,?V0 + 1
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     R1
        MOV     A,R1
        CLR     C
        SUBB    A,#0xa
        JC      ??initOS_0
        ; Setup parameters for call to function registerTask
        MOV     R4,#0x0
        MOV     R2,#getSurplusChargeHandle & 0xff
        MOV     R3,#(getSurplusChargeHandle >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ?Subroutine11
??CrossCallReturnLabel_14:
        MOV     R2,#getStationDataHandle & 0xff
        MOV     R3,#(getStationDataHandle >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   ?Subroutine11
??CrossCallReturnLabel_15:
        MOV     R2,#getLogHandle & 0xff
        MOV     R3,#(getLogHandle >> 8) & 0xff
        MOV     R1,#0x2
        LCALL   ?Subroutine11
??CrossCallReturnLabel_16:
        MOV     R2,#getTestHandle & 0xff
        MOV     R3,#(getTestHandle >> 8) & 0xff
        MOV     R1,#0x3
        LCALL   ?Subroutine11
??CrossCallReturnLabel_17:
        MOV     R2,#channelHandle & 0xff
        MOV     R3,#(channelHandle >> 8) & 0xff
        MOV     R1,#0x4
        LCALL   ?Subroutine11
??CrossCallReturnLabel_18:
        MOV     R2,#logLevelHandle & 0xff
        MOV     R3,#(logLevelHandle >> 8) & 0xff
        MOV     R1,#0x5
        LCALL   registerTask
        ; Setup parameters for call to function registerTask
        MOV     R4,#0x1
        MOV     R2,#scan & 0xff
        MOV     R3,#(scan >> 8) & 0xff
        MOV     R1,#0x6
        LCALL   ?Subroutine11
??CrossCallReturnLabel_19:
        MOV     R2,#detect & 0xff
        MOV     R3,#(detect >> 8) & 0xff
        MOV     R1,#0x7
        LCALL   registerTask
        LJMP    ?Subroutine1

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine11:
        LCALL   registerTask
        ; Setup parameters for call to function registerTask
        ; Setup parameters for call to function registerTask
        ; Setup parameters for call to function registerTask
        ; Setup parameters for call to function registerTask
        ; Setup parameters for call to function registerTask
        ; Setup parameters for call to function registerTask
        MOV     R4,#0x0
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
runOS:
        CODE
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??runOS_0
??runOS_1:
        ; Setup parameters for call to function checkUART
        LCALL   checkUART
??runOS_0:
        ; Setup parameters for call to function checkRF
        LCALL   checkRF
        ; Setup parameters for call to function getMyAddress
        LCALL   ??Subroutine21_0
??CrossCallReturnLabel_45:
        JZ      ??runOS_1
        ; Setup parameters for call to function checkUART
        LCALL   checkUART
        ; Setup parameters for call to function checkButton
        LCALL   checkButton
        SJMP    ??runOS_0

        RSEG NEAR_CODE:CODE:NOROOT(0)
checkButton:
        CODE
        ; Saved register size: 0
        ; Auto size: 0
        MOV     C,0x80.0
        JC      ??checkButton_0
        XRL     0x90,#0x1
        ; Setup parameters for call to function sendTest2AP
        LCALL   sendTest2AP
??checkButton_0:
        MOV     C,0x80.1
        JC      ??checkButton_1
        XRL     0x90,#0x2
        ; Setup parameters for call to function sendTest2AP
        LCALL   sendTest2AP
??checkButton_1:
        RET
        REQUIRE _A_P0
        REQUIRE _A_P1

        RSEG NEAR_CODE:CODE:NOROOT(0)
send2Computer:
        CODE
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "Receive new message\\n">` & 0xff
        MOV     R3,#(`?<Constant "Receive new message\\n">` >> 8) & 0xff
        LCALL   printf
        ; Setup parameters for call to function printf
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine23_0
??CrossCallReturnLabel_46:
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R2,#`?<Constant "port is %d\\ncontent is\\n">` & 0xff
        MOV     R3,#(`?<Constant "port is %d\\ncontent is\\n">` >> 8) & 0xff
        LCALL   ?Subroutine7
??CrossCallReturnLabel_2:
        LCALL   ?DEALLOC_XSTACK8
        MOV     A,R6
        ADD     A,#0x5
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??CrossCallReturnLabel_11
        ; Setup parameters for call to function putchar
        LCALL   ?Subroutine9
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function putchar
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine9
??CrossCallReturnLabel_11:
        MOV     A,R6
        ADD     A,#0x8
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      $+5
        LJMP    ??send2Computer_0
        ; Setup parameters for call to function printf
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R2,#`?<Constant "The number of nodes i...">` & 0xff
        MOV     R3,#(`?<Constant "The number of nodes i...">` >> 8) & 0xff
        LCALL   ?Subroutine7
??CrossCallReturnLabel_3:
        LCALL   ?DEALLOC_XSTACK8
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        SJMP    ??send2Computer_1
??send2Computer_2:
        ; Setup parameters for call to function printf
        MOV     ?V0 + 2,A
        LCALL   ?Subroutine12
??CrossCallReturnLabel_20:
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R2,#`?<Constant "node %d  ">` & 0xff
        MOV     R3,#(`?<Constant "node %d  ">` >> 8) & 0xff
        LCALL   ?Subroutine7
??CrossCallReturnLabel_4:
        LCALL   ?DEALLOC_XSTACK8
        DEC     ?V0 + 4
??send2Computer_1:
        MOV     A,?V0 + 4
        JNZ     ??send2Computer_2
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x1
        SJMP    ??send2Computer_3
??send2Computer_4:
        DEC     R0
        INC     R1
??send2Computer_3:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R1
        JC      ??send2Computer_5
        MOV     ?V0 + 2,R0
        LCALL   ?Subroutine12
??CrossCallReturnLabel_21:
        XRL     A,R1
        JZ      ??send2Computer_4
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#failTimes
??send2Computer_6:
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
        ; Setup parameters for call to function printf
        MOV     DPTR,#sendTimes
        LCALL   ?PUSH_XSTACK8_X_FOUR
        MOV     R2,#`?<Constant "\\nsendTimes is %d\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\nsendTimes is %d\\n">` >> 8) & 0xff
        LCALL   ?Subroutine8
??CrossCallReturnLabel_6:
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function printf
        MOV     DPTR,#failTimes
        LCALL   ?PUSH_XSTACK8_X_FOUR
        MOV     R2,#`?<Constant "failTimes is %d\\n">` & 0xff
        MOV     R3,#(`?<Constant "failTimes is %d\\n">` >> 8) & 0xff
        LCALL   ?Subroutine8
??CrossCallReturnLabel_7:
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function printf
        MOV     DPTR,#successTimes
        LCALL   ?PUSH_XSTACK8_X_FOUR
        MOV     R2,#`?<Constant "successTimes is %d\\n">` & 0xff
        MOV     R3,#(`?<Constant "successTimes is %d\\n">` >> 8) & 0xff
        LCALL   ?Subroutine8
??CrossCallReturnLabel_8:
        LCALL   ?DEALLOC_XSTACK8
        SJMP    ??send2Computer_7
??send2Computer_5:
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#successTimes
        SJMP    ??send2Computer_6
??send2Computer_0:
        MOV     A,R6
        ADD     A,#0x7
        MOV     ?V0 + 6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??send2Computer_8
        MOV     ?V0 + 2,#0x0
??send2Computer_9:
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0 + 2
        JC      ??send2Computer_7
        ; Setup parameters for call to function getLogInfor
        MOV     ?V0 + 4,?V0 + 2
        MOV     A,R6
        ADD     A,?V0 + 4
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x8
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   getLogInfor
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        INC     A
        ADD     A,?V0 + 2
        MOV     ?V0 + 2,A
        SJMP    ??send2Computer_9
??send2Computer_8:
        ; Setup parameters for call to function putstr
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x8
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   putstr
??send2Computer_7:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "bupt">` & 0xff
        MOV     R3,#(`?<Constant "bupt">` >> 8) & 0xff
        LCALL   printf
        MOV     R7,#0x8
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine12:
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine9:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   putchar
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
sendTest2AP:
        CODE
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 0
        ; Setup parameters for call to function getMyAddress
        LCALL   getMyAddress
        MOV     A,R1
        MOV     DPTR,#tx + 3
        MOVX    @DPTR,A
        MOV     DPTR,#tx + 2
        MOVX    @DPTR,A
        MOV     DPTR,#tx + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#tx
        CLR     A
        LCALL   ?Subroutine14
??CrossCallReturnLabel_22:
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R4,#`?<Constant "%d">` & 0xff
        MOV     R5,#(`?<Constant "%d">` >> 8) & 0xff
        MOV     R2,#logTemp & 0xff
        MOV     R3,#(logTemp >> 8) & 0xff
        LCALL   sprintf
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function memcpy
        ; Setup parameters for call to function strlen
        MOV     R2,#logTemp & 0xff
        MOV     R3,#(logTemp >> 8) & 0xff
        LCALL   strlen
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R4,#logTemp & 0xff
        MOV     R5,#(logTemp >> 8) & 0xff
        MOV     R2,#(tx + 8) & 0xff
        MOV     R3,#((tx + 8) >> 8) & 0xff
        LCALL   memcpy
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function strlen
        MOV     R2,#logTemp & 0xff
        MOV     R3,#(logTemp >> 8) & 0xff
        LCALL   strlen
        MOV     A,R2
        MOV     DPTR,#tx + 7
        MOVX    @DPTR,A
        ; Setup parameters for call to function send
        MOV     R1,#0x3a
        MOV     R2,#tx & 0xff
        MOV     R3,#(tx >> 8) & 0xff
        LCALL   send
        MOV     A,R1
        MOV     R0,A
        MOV     DPTR,#logTemp
        JNZ     ??sendTest2AP_0
        MOV     A,#0x2
        MOVX    @DPTR,A
        LCALL   ?Subroutine13
??CrossCallReturnLabel_29:
        MOV     R1,#0x3
        SJMP    ??sendTest2AP_1
??sendTest2AP_0:
        MOV     A,#0x3
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,R0
        LCALL   ?Subroutine13
??CrossCallReturnLabel_30:
        MOV     R1,#0x0
??sendTest2AP_1:
        LCALL   log
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine1:
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine13:
        INC     DPTR
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG NEAR_CODE:CODE:NOROOT(0)
??Subroutine17_0:
        MOVX    @DPTR,A
        ; Setup parameters for call to function log
        ; Setup parameters for call to function log
        ; Setup parameters for call to function log
        ; Setup parameters for call to function log
        ; Setup parameters for call to function log
        MOV     R2,#logTemp & 0xff
        MOV     R3,#(logTemp >> 8) & 0xff
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
checkRF:
        CODE
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 0
        ; Setup parameters for call to function receive
        LCALL   receive
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        MOV     A,R6
        ORL     A,R7
        JZ      ??checkRF_0
        ; Setup parameters for call to function checkFlag
        LCALL   checkFlag
        ; Setup parameters for call to function handleRF
        MOV     R1,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   handleRF
??checkRF_0:
        SJMP    ?Subroutine1

        RSEG NEAR_CODE:CODE:NOROOT(0)
handleRF:
        CODE
        MOV     A,#-0xd
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 13
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R1
        ; Setup parameters for call to function getMyAddress
        LCALL   getMyAddress
        MOV     A,R1
        MOV     ?V0 + 1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R1
        XRL     A,R0
        JNZ     $+5
        LJMP    ??handleRF_0
        MOV     A,R0
        CLR     C
        SUBB    A,?V0 + 1
        JNC     ??handleRF_1
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine20_0
??CrossCallReturnLabel_40:
        LCALL   ?S_SHL
        MOV     A,#taskList & 0xff
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,#(taskList >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??handleRF_1
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine5
??CrossCallReturnLabel_0:
        JZ      ??handleRF_1
        ; Setup parameters for indirect call
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ?CALL_IND
??handleRF_1:
        ; Setup parameters for call to function fowardFrame
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   fowardFrame
        MOV     A,R1
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R3
        JNZ     ??handleRF_2
        MOV     DPTR,#logTemp
        MOV     A,#0x3
        LCALL   ?Subroutine10
??CrossCallReturnLabel_12:
        ; Setup parameters for call to function log
        MOV     R2,#logTemp & 0xff
        MOV     R3,#(logTemp >> 8) & 0xff
        MOV     R1,#0x3
        LJMP    ??handleRF_3
??handleRF_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??handleRF_4
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V0 + 1
        CLR     C
        SUBB    A,R2
        JNC     ??handleRF_4
        ; Setup parameters for call to function callApplication
        MOV     R4,#tx & 0xff
        MOV     R5,#(tx >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   callApplication
        MOV     DPTR,#logTemp
        MOV     A,#0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0xe
        LCALL   ??Subroutine17_0
??CrossCallReturnLabel_32:
        MOV     R1,#0x4
        LJMP    ??handleRF_3
??handleRF_4:
        MOV     DPTR,#logTemp
        MOV     A,#0x4
        LCALL   ?Subroutine10
??CrossCallReturnLabel_13:
        MOV     A,R3
        LCALL   ?Subroutine13
??CrossCallReturnLabel_31:
        MOV     R1,#0x0
        LJMP    ??handleRF_3
??handleRF_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0xa
        JNC     ??handleRF_5
        XRL     0x90,#0x1
        XRL     0x90,#0x2
        MOV     A,#0x1
        XRL     A,?V0 + 1
        JNZ     ??handleRF_6
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 0
        JZ      ??handleRF_7
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        LCALL   ?Subroutine16
??CrossCallReturnLabel_26:
        LCALL   ?Subroutine5
??CrossCallReturnLabel_1:
        JZ      ??handleRF_8
        ; Setup parameters for indirect call
        MOV     R4,#tx & 0xff
        MOV     R5,#(tx >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ?CALL_IND
        MOV     DPTR,#tx + 7
        MOVX    A,@DPTR
        JZ      ??handleRF_8
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPTR,#tx
        MOVX    @DPTR,A
        MOV     DPTR,#tx + 5
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function send2Computer
        MOV     R2,#tx & 0xff
        MOV     R3,#(tx >> 8) & 0xff
??handleRF_9:
        LCALL   send2Computer
        SJMP    ??handleRF_8
??handleRF_7:
        MOV     A,#0x6
        XRL     A,?V0 + 2
        JNZ     ??handleRF_10
        ; Setup parameters for indirect call
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#taskList + 26
        LCALL   ??Subroutine19_0
??CrossCallReturnLabel_36:
        LCALL   ?CALL_IND
        ; Setup parameters for call to function send2Computer
??handleRF_10:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??handleRF_9
??handleRF_6:
        ; Setup parameters for call to function callApplication
        MOV     R4,#tx & 0xff
        MOV     R5,#(tx >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   callApplication
        SJMP    ??handleRF_8
??handleRF_5:
        MOV     DPTR,#logTemp
        MOV     A,#0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        LCALL   ??Subroutine17_0
??CrossCallReturnLabel_33:
        MOV     R1,#0x1
??handleRF_3:
        LCALL   log
??handleRF_8:
        REQUIRE ?Subroutine2
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine2

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine2:
        MOV     R7,#0x6
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine10:
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPTR,#logTemp + 2
        MOVX    @DPTR,A
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine5:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,DPL
        ORL     A,DPH
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
callApplication:
        CODE
        MOV     A,#-0xd
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        LCALL   ?Subroutine4
??CrossCallReturnLabel_41:
        LCALL   ?S_SHL
        LCALL   ?Subroutine16
??CrossCallReturnLabel_27:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??callApplication_0
        MOV     A,R6
        ADD     A,#0x7
        MOV     ?V0 + 4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     DPL,?V0 + 4
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for indirect call
        LCALL   ?Subroutine4
??CrossCallReturnLabel_42:
        LCALL   ?S_SHL
        LCALL   ?Subroutine16
??CrossCallReturnLabel_28:
        LCALL   ??Subroutine19_0
??CrossCallReturnLabel_37:
        LCALL   ?CALL_IND
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?Subroutine14
??CrossCallReturnLabel_23:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine14
??CrossCallReturnLabel_24:
        MOV     R0,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        JZ      ??callApplication_0
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??callApplication_1
        ; Setup parameters for call to function send2Computer
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   send2Computer
        SJMP    ??callApplication_0
??callApplication_1:
        ; Setup parameters for call to function sprintf
        ; Setup parameters for call to function getRcText
        ; Setup parameters for call to function send
        MOV     R1,#0x3a
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   send
        MOV     ?V0 + 0,R1
        MOV     R2,?V0 + 0
        MOV     R3,#0x0
        LCALL   getRcText
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R4,#`?<Constant "Send result: %s\\n">` & 0xff
        MOV     R5,#(`?<Constant "Send result: %s\\n">` >> 8) & 0xff
        MOV     R2,#logTemp & 0xff
        MOV     R3,#(logTemp >> 8) & 0xff
        LCALL   sprintf
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function consoleAP
        MOV     R2,#logTemp & 0xff
        MOV     R3,#(logTemp >> 8) & 0xff
        LCALL   consoleAP
??callApplication_0:
        LJMP    ?Subroutine2

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine16:
        MOV     A,#(taskList + 2) & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#((taskList + 2) >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine14:
        MOVX    @DPTR,A
        ; Setup parameters for call to function sprintf
        ; Setup parameters for call to function getMyAddress
        ; Setup parameters for call to function getMyAddress
        ; Setup parameters for call to function getMyAddress
        ; Setup parameters for call to function getMyAddress
        LCALL   getMyAddress
        MOV     A,R1
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine6:
        MOVX    @DPTR,A
        ; Setup parameters for call to function memcpy
        REQUIRE ??Subroutine18_0
        ; // Fall through to label ??Subroutine18_0

        RSEG NEAR_CODE:CODE:NOROOT(0)
??Subroutine18_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        REQUIRE ??Subroutine19_0
        ; // Fall through to label ??Subroutine19_0

        RSEG NEAR_CODE:CODE:NOROOT(0)
??Subroutine19_0:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine4:
        MOV     DPL,R2
        MOV     DPH,R3
        REQUIRE ??Subroutine20_0
        ; // Fall through to label ??Subroutine20_0

        RSEG NEAR_CODE:CODE:NOROOT(0)
??Subroutine20_0:
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
debug:
        CODE
        PUSH    DPL
        PUSH    DPH
        ; Saved register size: 2
        ; Auto size: 0
        LCALL   ?Subroutine15
??CrossCallReturnLabel_43:
        JNZ     ??debug_0
        ; Setup parameters for call to function putstr
        ; Setup parameters for call to function strlen
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   strlen
        MOV     A,R2
        MOV     R1,A
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   putstr
??debug_0:
        LJMP    ?Subroutine0

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine15:
        MOV     DPL,R2
        MOV     DPH,R3
        ; Setup parameters for call to function getMyAddress
        ; Setup parameters for call to function getMyAddress
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG NEAR_CODE:CODE:NOROOT(0)
??Subroutine21_0:
        LCALL   getMyAddress
        MOV     A,R1
        XRL     A,#0x1
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
consoleAP:
        CODE
        PUSH    DPL
        PUSH    DPH
        ; Saved register size: 2
        ; Auto size: 0
        LCALL   ?Subroutine15
??CrossCallReturnLabel_44:
        JNZ     ??consoleAP_0
        ; Setup parameters for call to function debug
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   debug
??consoleAP_0:
        LJMP    ?Subroutine0

        RSEG NEAR_CODE:CODE:NOROOT(0)
checkUART:
        CODE
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 11
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        ; Setup parameters for call to function rx_receive_line
        MOV     R1,#0x32
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   rx_receive_line
        MOV     A,R1
        ADD     A,#-0x2
        MOV     R6,A
        CLR     C
        SUBB    A,#0x3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??checkUART_0
        LCALL   ??Subroutine19_0
??CrossCallReturnLabel_38:
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??checkUART_1
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#sendTimes
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
??checkUART_1:
        ; Setup parameters for call to function checkFlag
        LCALL   checkFlag
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "\\nGet command: ">` & 0xff
        MOV     R3,#(`?<Constant "\\nGet command: ">` >> 8) & 0xff
        LCALL   printf
        ; Setup parameters for call to function puthex
        MOV     A,R6
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   puthex
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant ",waiting for result\\n">` & 0xff
        MOV     R3,#(`?<Constant ",waiting for result\\n">` >> 8) & 0xff
        LCALL   printf
        LCALL   ??Subroutine18_0
??CrossCallReturnLabel_39:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#rx + 1
        MOVX    @DPTR,A
        MOV     DPTR,#rx + 3
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#rx + 2
        LCALL   ?Subroutine14
??CrossCallReturnLabel_25:
        MOV     DPTR,#rx + 4
        LCALL   ?Subroutine6
??CrossCallReturnLabel_34:
        MOVX    A,@DPTR
        MOV     DPTR,#rx
        MOVX    @DPTR,A
        MOV     A,#-0x3
        ADD     A,R6
        MOV     DPTR,#rx + 7
        LCALL   ?Subroutine6
??CrossCallReturnLabel_35:
        LCALL   ??Subroutine22_0
??CrossCallReturnLabel_47:
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#(rx + 8) & 0xff
        MOV     R3,#((rx + 8) >> 8) & 0xff
        LCALL   memcpy
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        MOV     DPTR,#rx + 4
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??checkUART_0
        ; Setup parameters for call to function handleRF
        MOV     R1,#0x1
        MOV     R2,#rx & 0xff
        MOV     R3,#(rx >> 8) & 0xff
        LCALL   handleRF
??checkUART_0:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        MOV     R7,#0x4
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine3:
        MOV     DPL,R2
        MOV     DPH,R3
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG NEAR_CODE:CODE:NOROOT(0)
??Subroutine22_0:
        INC     DPTR
        INC     DPTR
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG NEAR_CODE:CODE:NOROOT(0)
??Subroutine23_0:
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
framework_entry:
        CODE
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function initOS
        LCALL   initOS
        ; Setup parameters for call to function runOS
        LCALL   runOS
??framework_entry_0:
        SJMP    ??framework_entry_0

        RSEG NEAR_CODE:CODE:NOROOT(0)
getLogInfor:
        CODE
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??getLogInfor_0
        DEC     A
        JZ      ??getLogInfor_1
        DEC     A
        JNZ     $+5
        LJMP    ??getLogInfor_2
        DEC     A
        JNZ     $+5
        LJMP    ??getLogInfor_3
        DEC     A
        JNZ     $+5
        LJMP    ??getLogInfor_4
        DEC     A
        JNZ     $+5
        LJMP    ??getLogInfor_5
        ADD     A,#-0x2
        JNZ     $+5
        LJMP    ??getLogInfor_6
        DEC     A
        JNZ     $+5
        LJMP    ??getLogInfor_7
        DEC     A
        JNZ     $+5
        LJMP    ??getLogInfor_8
        DEC     A
        JNZ     $+5
        LJMP    ??getLogInfor_9
        DEC     A
        JNZ     $+5
        LJMP    ??getLogInfor_10
        DEC     A
        JNZ     $+5
        LJMP    ??getLogInfor_11
        DEC     A
        JNZ     $+5
        LJMP    ??getLogInfor_12
        DEC     A
        JNZ     $+5
        LJMP    ??getLogInfor_13
        DEC     A
        JNZ     $+5
        LJMP    ??getLogInfor_14
        LJMP    ??getLogInfor_15
??getLogInfor_0:
        ; Setup parameters for call to function printf
        LCALL   ?Subroutine3
??CrossCallReturnLabel_50:
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R2,#`?<Constant "INFO_SEND:SEND_SUCCES...">` & 0xff
        MOV     R3,#(`?<Constant "INFO_SEND:SEND_SUCCES...">` >> 8) & 0xff
??getLogInfor_16:
        LCALL   ?Subroutine7
??CrossCallReturnLabel_5:
        LCALL   ?DEALLOC_XSTACK8
        LJMP    ??getLogInfor_15
??getLogInfor_1:
        ; Setup parameters for call to function printf
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine22_0
??CrossCallReturnLabel_48:
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R2,#`?<Constant "ERROR_SEND:SEND_FAILE...">` & 0xff
        MOV     R3,#(`?<Constant "ERROR_SEND:SEND_FAILE...">` >> 8) & 0xff
        LCALL   printf
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        SJMP    ??getLogInfor_15
??getLogInfor_2:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "INFO_SEND:SEND_TEST_2...">` & 0xff
        MOV     R3,#(`?<Constant "INFO_SEND:SEND_TEST_2...">` >> 8) & 0xff
        SJMP    ??getLogInfor_17
??getLogInfor_3:
        ; Setup parameters for call to function printf
        LCALL   ?Subroutine3
??CrossCallReturnLabel_51:
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R2,#`?<Constant "ERROR_SEND:SEND_TEST_...">` & 0xff
        MOV     R3,#(`?<Constant "ERROR_SEND:SEND_TEST_...">` >> 8) & 0xff
        SJMP    ??getLogInfor_16
??getLogInfor_4:
        ; Setup parameters for call to function printf
        LCALL   ?Subroutine3
??CrossCallReturnLabel_52:
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R2,#`?<Constant "INFO_SEND:FORWARD_SUC...">` & 0xff
        MOV     R3,#(`?<Constant "INFO_SEND:FORWARD_SUC...">` >> 8) & 0xff
        SJMP    ??getLogInfor_16
??getLogInfor_5:
        ; Setup parameters for call to function printf
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        LCALL   ??Subroutine22_0
??CrossCallReturnLabel_49:
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R2,#`?<Constant "ERROR_SEND:FORWARD_FA...">` & 0xff
        MOV     R3,#(`?<Constant "ERROR_SEND:FORWARD_FA...">` >> 8) & 0xff
        LCALL   ?Subroutine8
??CrossCallReturnLabel_9:
        LCALL   ?DEALLOC_XSTACK8
        SJMP    ??getLogInfor_15
??getLogInfor_6:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "ERROR_OTHER:ERROR_PORT;\\n">` & 0xff
        MOV     R3,#(`?<Constant "ERROR_OTHER:ERROR_PORT;\\n">` >> 8) & 0xff
        SJMP    ??getLogInfor_17
??getLogInfor_7:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "INFO_OTHER:SEND_CHANN...">` & 0xff
        MOV     R3,#(`?<Constant "INFO_OTHER:SEND_CHANN...">` >> 8) & 0xff
        SJMP    ??getLogInfor_17
??getLogInfor_8:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "INFO_OTHER:SET_CHANNEL;\\n">` & 0xff
        MOV     R3,#(`?<Constant "INFO_OTHER:SET_CHANNEL;\\n">` >> 8) & 0xff
        SJMP    ??getLogInfor_17
??getLogInfor_9:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "INFO_OTHER:SEND_LOG;\\n">` & 0xff
        MOV     R3,#(`?<Constant "INFO_OTHER:SEND_LOG;\\n">` >> 8) & 0xff
        SJMP    ??getLogInfor_17
??getLogInfor_10:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "INFO_OTHER:NO_LOG;\\n">` & 0xff
        MOV     R3,#(`?<Constant "INFO_OTHER:NO_LOG;\\n">` >> 8) & 0xff
        SJMP    ??getLogInfor_17
??getLogInfor_11:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "ERROR_OTHER:LOG_LEVEL...">` & 0xff
        MOV     R3,#(`?<Constant "ERROR_OTHER:LOG_LEVEL...">` >> 8) & 0xff
        SJMP    ??getLogInfor_17
??getLogInfor_12:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "ERROR_OTHER:SET_LOGLE...">` & 0xff
        MOV     R3,#(`?<Constant "ERROR_OTHER:SET_LOGLE...">` >> 8) & 0xff
        SJMP    ??getLogInfor_17
??getLogInfor_13:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "INFO_OTHER:SCAN_BACK;\\n">` & 0xff
        MOV     R3,#(`?<Constant "INFO_OTHER:SCAN_BACK;\\n">` >> 8) & 0xff
        SJMP    ??getLogInfor_17
??getLogInfor_14:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "ERROR_OTHER:SCAN_SIZE...">` & 0xff
        MOV     R3,#(`?<Constant "ERROR_OTHER:SCAN_SIZE...">` >> 8) & 0xff
??getLogInfor_17:
        LCALL   printf
??getLogInfor_15:
        LJMP    ?Subroutine1

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine8:
        LCALL   printf
        MOV     A,#0x4
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine7:
        LCALL   printf
        MOV     A,#0x2
        RET

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "no room in last r`:
        DB "no room in last receive------------------\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "i get ack--------`:
        DB "i get ack-------------------------\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Receive new messa`:
        DB "Receive new message\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "port is %d\\nconte`:
        DB "port is %d\012content is\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "The number of nod`:
        DB "The number of nodes is %d\012They are "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "node %d  ">>`:
        DB "node %d  "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "\\nsendTimes is %d`:
        DB "\012sendTimes is %d\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "failTimes is %d\\n`:
        DB "failTimes is %d\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "successTimes is %`:
        DB "successTimes is %d\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "bupt">>`:
        DB "bupt"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "%d">>`:
        DB "%d"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Send result: %s\\n`:
        DB "Send result: %s\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "\\nGet command: ">`:
        DB "\012Get command: "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant ",waiting for resu`:
        DB ",waiting for result\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "INFO_SEND:SEND_SU`:
        DB "INFO_SEND:SEND_SUCCESSED, dstAddr: d%;\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "ERROR_SEND:SEND_F`:
        DB 45H, 52H, 52H, 4FH, 52H, 5FH, 53H, 45H
        DB 4EH, 44H, 3AH, 53H, 45H, 4EH, 44H, 5FH
        DB 46H, 41H, 49H, 4CH, 45H, 44H, 2CH, 20H
        DB 64H, 73H, 74H, 41H, 64H, 64H, 72H, 3AH
        DB 20H, 64H, 25H, 2CH, 20H, 72H, 63H, 3AH
        DB 20H, 64H, 25H, 2CH, 20H, 66H, 61H, 69H
        DB 6CH, 65H, 64H, 20H, 74H, 69H, 6DH, 65H
        DB 73H, 3AH, 64H, 25H, 3BH, 0AH, 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "INFO_SEND:SEND_TE`:
        DB "INFO_SEND:SEND_TEST_2AP_SUCCESSED;\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "ERROR_SEND:SEND_T`:
        DB "ERROR_SEND:SEND_TEST_2AP_FAILED, rc: d%;\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "INFO_SEND:FORWARD`:
        DB "INFO_SEND:FORWARD_SUCCESSED, dstAddr: d%;\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "ERROR_SEND:FORWAR`:
        DB "ERROR_SEND:FORWARD_FAILED, dstAddr: d%, rc: d%;\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "ERROR_OTHER:ERROR`:
        DB "ERROR_OTHER:ERROR_PORT;\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "INFO_OTHER:SEND_C`:
        DB "INFO_OTHER:SEND_CHANNEL;\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "INFO_OTHER:SET_CH`:
        DB "INFO_OTHER:SET_CHANNEL;\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "INFO_OTHER:SEND_L`:
        DB "INFO_OTHER:SEND_LOG;\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "INFO_OTHER:NO_LOG`:
        DB "INFO_OTHER:NO_LOG;\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "ERROR_OTHER:LOG_L`:
        DB "ERROR_OTHER:LOG_LEVEL_ERROR_INFRAME;\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "ERROR_OTHER:SET_L`:
        DB "ERROR_OTHER:SET_LOGLEVEL_SIZE_ERROR;\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "INFO_OTHER:SCAN_B`:
        DB "INFO_OTHER:SCAN_BACK;\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "ERROR_OTHER:SCAN_`:
        DB "ERROR_OTHER:SCAN_SIZEOUT;\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_1>`:
        DATA32
        DD 1

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "no room in last recei...">`:
        DS 43
        REQUIRE `?<Initializer for <Constant "no room in last r`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "i get ack------------...">`:
        DS 36
        REQUIRE `?<Initializer for <Constant "i get ack--------`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "Receive new message\\n">`:
        DS 21
        REQUIRE `?<Initializer for <Constant "Receive new messa`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "port is %d\\ncontent is\\n">`:
        DS 23
        REQUIRE `?<Initializer for <Constant "port is %d\\nconte`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "The number of nodes i...">`:
        DS 36
        REQUIRE `?<Initializer for <Constant "The number of nod`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "node %d  ">`:
        DS 10
        REQUIRE `?<Initializer for <Constant "node %d  ">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "\\nsendTimes is %d\\n">`:
        DS 18
        REQUIRE `?<Initializer for <Constant "\\nsendTimes is %d`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "failTimes is %d\\n">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "failTimes is %d\\n`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "successTimes is %d\\n">`:
        DS 20
        REQUIRE `?<Initializer for <Constant "successTimes is %`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "bupt">`:
        DS 5
        REQUIRE `?<Initializer for <Constant "bupt">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "%d">`:
        DS 3
        REQUIRE `?<Initializer for <Constant "%d">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "Send result: %s\\n">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "Send result: %s\\n`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "\\nGet command: ">`:
        DS 15
        REQUIRE `?<Initializer for <Constant "\\nGet command: ">`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant ",waiting for result\\n">`:
        DS 21
        REQUIRE `?<Initializer for <Constant ",waiting for resu`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "INFO_SEND:SEND_SUCCES...">`:
        DS 40
        REQUIRE `?<Initializer for <Constant "INFO_SEND:SEND_SU`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "ERROR_SEND:SEND_FAILE...">`:
        DS 63
        REQUIRE `?<Initializer for <Constant "ERROR_SEND:SEND_F`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "INFO_SEND:SEND_TEST_2...">`:
        DS 36
        REQUIRE `?<Initializer for <Constant "INFO_SEND:SEND_TE`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "ERROR_SEND:SEND_TEST_...">`:
        DS 42
        REQUIRE `?<Initializer for <Constant "ERROR_SEND:SEND_T`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "INFO_SEND:FORWARD_SUC...">`:
        DS 43
        REQUIRE `?<Initializer for <Constant "INFO_SEND:FORWARD`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "ERROR_SEND:FORWARD_FA...">`:
        DS 49
        REQUIRE `?<Initializer for <Constant "ERROR_SEND:FORWAR`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "ERROR_OTHER:ERROR_PORT;\\n">`:
        DS 25
        REQUIRE `?<Initializer for <Constant "ERROR_OTHER:ERROR`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "INFO_OTHER:SEND_CHANN...">`:
        DS 26
        REQUIRE `?<Initializer for <Constant "INFO_OTHER:SEND_C`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "INFO_OTHER:SET_CHANNEL;\\n">`:
        DS 25
        REQUIRE `?<Initializer for <Constant "INFO_OTHER:SET_CH`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "INFO_OTHER:SEND_LOG;\\n">`:
        DS 22
        REQUIRE `?<Initializer for <Constant "INFO_OTHER:SEND_L`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "INFO_OTHER:NO_LOG;\\n">`:
        DS 20
        REQUIRE `?<Initializer for <Constant "INFO_OTHER:NO_LOG`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "ERROR_OTHER:LOG_LEVEL...">`:
        DS 38
        REQUIRE `?<Initializer for <Constant "ERROR_OTHER:LOG_L`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "ERROR_OTHER:SET_LOGLE...">`:
        DS 38
        REQUIRE `?<Initializer for <Constant "ERROR_OTHER:SET_L`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "INFO_OTHER:SCAN_BACK;\\n">`:
        DS 23
        REQUIRE `?<Initializer for <Constant "INFO_OTHER:SCAN_B`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "ERROR_OTHER:SCAN_SIZE...">`:
        DS 27
        REQUIRE `?<Initializer for <Constant "ERROR_OTHER:SCAN_`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_1:
        DS 4
        REQUIRE `?<Initializer for __Constant_1>`
        REQUIRE __INIT_XDATA_I

        END
// 
// 2 078 bytes in segment NEAR_CODE
//     2 bytes in segment SFR_AN
//   806 bytes in segment XDATA_I
//   806 bytes in segment XDATA_ID
//    54 bytes in segment XDATA_Z
// 
// 2 880 bytes of CODE  memory (+ 4 bytes shared)
//     0 bytes of DATA  memory (+ 2 bytes shared)
//   856 bytes of XDATA memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: 3
