///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        27/Feb/2012  21:21:05 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  2,separate,16,inc                                 /
//    Source file        =  C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Compone /
//                          nts\Applications\logLevel.c                       /
//    Command line       =  -f "C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Pro /
//                          jects\Examples\SRF04\UART_Bridge\IAR\Configuratio /
//                          n\LinkTo\smpl_config.dat" (-DNUM_CONNECTIONS=2    /
//                          -DSIZE_INFRAME_Q=2 -DSIZE_OUTFRAME_Q=2            /
//                          -DTHIS_DEVICE_ADDRESS={0x1} -DEND_DEVICE          /
//                          -DLINK_TO -DxNWK_PLL_REFERENCE_CLOCK) -f          /
//                          "C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Projec /
//                          ts\Examples\SRF04\UART_Bridge\IAR\Configuration\s /
//                          mpl_nwk_config.dat" (-DMAX_HOPS=3                 /
//                          -DMAX_HOPS_FROM_ME=3 -DCOMMAND_SIZE=10            /
//                          -DLOGTEMP_SIZE=100 -DMAX_HOPS_FROM_AP=1           /
//                          -DMAX_NWK_PAYLOAD=34 -DMAX_APP_PAYLOAD=20         /
//                          -DDEFAULT_LINK_TOKEN=0x01020304                   /
//                          -DDEFAULT_JOIN_TOKEN=0x05060708                   /
//                          -DxFREQUENCY_AGILITY -DxAPP_AUTO_ACK              /
//                          -DEXTENDED_API -DxSMPL_SECURE                     /
//                          -DxNVOBJECT_SUPPORT -DxSW_TIMER                   /
//                          -DxFREQUENCY_HOPPING -DBSP_TIMER_USED=1           /
//                          -DNWK_PLL_SHOW_LOCATION_INDICATORS                /
//                          -DUART_NUMBER=UART_NUMBER_0                       /
//                          -DUART_LOCATION=UART_LOCATION_1                   /
//                          -DUART_BAUD_RATE=9600 -DUART_FLOW_CONTROL=UART_FL /
//                          OW_CONTROL_OFF -DUART_PARITY_MODE=UART_PARITY_NON /
//                          E -DUART_STOP_BITS=UART_1_STOP_BIT) "C:\Texas     /
//                          Instruments\SimpliciTI-IAR-1.2.0\Components\Appli /
//                          cations\logLevel.c" -D "MCU_H=\"ioCC1110.h\"" -D  /
//                          MRFI_CC1110 -lB "C:\Texas                         /
//                          Instruments\SimpliciTI-IAR-1.2.0\Projects\Example /
//                          s\SRF04\UART_Bridge\IAR\CC1110-LinkTo\List\" -o   /
//                          "C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Projec /
//                          ts\Examples\SRF04\UART_Bridge\IAR\CC1110-LinkTo\O /
//                          bj\" -e --debug --core=plain                      /
//                          --dptr=16,2,separate,inc --data_model=large       /
//                          --code_model=near --calling_convention=xdata_reen /
//                          trant --place_constants=data --nr_virtual_regs 8  /
//                          -I "C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Pro /
//                          jects\Examples\SRF04\UART_Bridge\IAR\..\..\..\..\ /
//                          ..\Components\bsp\" -I "C:\Texas                  /
//                          Instruments\SimpliciTI-IAR-1.2.0\Projects\Example /
//                          s\SRF04\UART_Bridge\IAR\..\..\..\..\..\Components /
//                          \bsp\drivers\" -I "C:\Texas                       /
//                          Instruments\SimpliciTI-IAR-1.2.0\Projects\Example /
//                          s\SRF04\UART_Bridge\IAR\..\..\..\..\..\Components /
//                          \bsp\boards\SRF04EB\" -I "C:\Texas                /
//                          Instruments\SimpliciTI-IAR-1.2.0\Projects\Example /
//                          s\SRF04\UART_Bridge\IAR\..\..\..\..\..\Components /
//                          \mrfi\" -I "C:\Texas Instruments\SimpliciTI-IAR-1 /
//                          .2.0\Projects\Examples\SRF04\UART_Bridge\IAR\..\. /
//                          .\..\..\..\Components\SimpliciTI\nwk\" -I         /
//                          "C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Projec /
//                          ts\Examples\SRF04\UART_Bridge\IAR\..\..\..\..\..\ /
//                          Components\SimpliciTI\nwk_applications\" -I       /
//                          "C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Projec /
//                          ts\Examples\SRF04\UART_Bridge\IAR\..\..\..\..\..\ /
//                          Components\ApplicationFramwork\" -Ohs             /
//    List file          =  C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Project /
//                          s\Examples\SRF04\UART_Bridge\IAR\CC1110-LinkTo\Li /
//                          st\logLevel.s51                                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME logLevel

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ADD_XSTACK_DISP0_8
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?DPH1
        EXTERN ?DPL1
        EXTERN ?DPS
        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_RESTORE_DPTRS_1
        EXTERN ?XSTACK_SAVE_DPTRS_1
        EXTERN __INIT_XDATA_I

        PUBLIC logLevelHandle

        EXTERN log
        EXTERN memcpy
        EXTERN logLevel

// C:\Texas Instruments\SimpliciTI-IAR-1.2.0\Components\Applications\logLevel.c
//    1 /*************************************
//    2  * get or set log level
//    3  *
//    4  * Create date: 2011/12/2 
//    5  * Author: yongfa.zhou, email: zyfa2008@163.com
//    6  * bupt fop laboratory
//    7  */
//    8 
//    9 #include "framework.h"
//   10 
//   11 extern uint8 logLevel;
//   12 
//   13 /* just a test implement
//   14  */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   15 void logLevelHandle(struct AppFrame* appInFrame, struct AppFrame* appOutFrame)
logLevelHandle:
        CODE
//   16 {
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        MOV     A,#-0x2
        LCALL   ?ADD_XSTACK_DISP0_8
        LCALL   ?XSTACK_SAVE_DPTRS_1
        ; Saved register size: 11
        ; Auto size: 0
        MOV     ?DPL1,R4
        MOV     ?DPH1,R5
//   17 
//   18 	if(appInFrame->len == 0)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        JNZ     ??logLevelHandle_0
//   19 	{
//   20 		log(ERROR, "log level error inframe");
        ; Setup parameters for call to function log
        MOV     R2,#`?<Constant "log level error inframe">` & 0xff
        MOV     R3,#(`?<Constant "log level error inframe">` >> 8) & 0xff
        SJMP    ??logLevelHandle_1
//   21 	}
//   22 	else
//   23 	{
//   24 		if(appInFrame->msg[0] == 0x00)
??logLevelHandle_0:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??logLevelHandle_2
//   25 		{
//   26 			appOutFrame->msg[0] = logLevel;
        MOV     DPTR,#logLevel
        MOVX    A,@DPTR
        MOV     DPL,?DPL1
        MOV     DPH,?DPH1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//   27 			appOutFrame->len = 1;
        ; Selecting DPTR 1 by inc-method (DPSEL=0)
        INC     ?DPS
        INC     DPTR/*1*/
        INC     DPTR/*1*/
        INC     DPTR/*1*/
        INC     DPTR/*1*/
        INC     DPTR/*1*/
        INC     DPTR/*1*/
        INC     DPTR/*1*/
        MOV     A,#0x1
??logLevelHandle_3:
        MOVX    @DPTR/*1*/,A
        SJMP    ??logLevelHandle_4
//   28 		}
//   29 		else
//   30 		{
//   31 			if(appInFrame->len >= 2)
??logLevelHandle_2:
        MOV     A,R0
        CLR     C
        SUBB    A,#0x2
        JC      ??logLevelHandle_5
//   32 			{
//   33 				logLevel = appInFrame->msg[1];				
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#logLevel
        MOVX    @DPTR,A
//   34 				memcpy(appOutFrame->msg, "Success", 7);
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x7
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R4,#`?<Constant "Success">` & 0xff
        MOV     R5,#(`?<Constant "Success">` >> 8) & 0xff
        MOV     A,?DPL1
        ADD     A,#0x8
        MOV     R2,A
        MOV     A,?DPH1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   memcpy
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
//   35 				appOutFrame->len = strlen("Success");
        ; Selecting DPTR 1 by inc-method (DPSEL=0)
        INC     ?DPS
        INC     DPTR/*1*/
        INC     DPTR/*1*/
        INC     DPTR/*1*/
        INC     DPTR/*1*/
        INC     DPTR/*1*/
        INC     DPTR/*1*/
        INC     DPTR/*1*/
        MOV     A,#0x7
        SJMP    ??logLevelHandle_3
//   36 			}
//   37 			else
//   38 			{
//   39 				log(ERROR, "Set LogLevel size error");
??logLevelHandle_5:
        ; Setup parameters for call to function log
        MOV     R2,#`?<Constant "Set LogLevel size error">` & 0xff
        MOV     R3,#(`?<Constant "Set LogLevel size error">` >> 8) & 0xff
??logLevelHandle_1:
        MOV     R1,#0x0
        LCALL   log
//   40 			}
//   41 		}
//   42 	}
//   43 	return;
??logLevelHandle_4:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        ; Selecting DPTR 0 by inc-method (DPSEL=x)
        ANL     ?DPS,#0xfe
        LCALL   ?XSTACK_RESTORE_DPTRS_1
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA
//   44 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "log level error i`:
        DB "log level error inframe"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Success">>`:
        DB "Success"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Set LogLevel size`:
        DB "Set LogLevel size error"

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "log level error inframe">`:
        DS 24
        REQUIRE `?<Initializer for <Constant "log level error i`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "Success">`:
        DS 8
        REQUIRE `?<Initializer for <Constant "Success">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "Set LogLevel size error">`:
        DS 24
        REQUIRE `?<Initializer for <Constant "Set LogLevel size`
        REQUIRE __INIT_XDATA_I

        END
//   45 
// 
// 187 bytes in segment NEAR_CODE
//  56 bytes in segment XDATA_I
//  56 bytes in segment XDATA_ID
// 
// 243 bytes of CODE  memory
//  56 bytes of XDATA memory
//
//Errors: none
//Warnings: none
