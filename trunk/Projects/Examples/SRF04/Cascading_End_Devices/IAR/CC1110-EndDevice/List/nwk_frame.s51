///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        11/Aug/2012  13:38:22 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\linear-wireless\Components\simpliciti\nwk\nwk_ /
//                          frame.c                                           /
//    Command line       =  -f E:\linear-wireless\Projects\Examples\SRF04\Cas /
//                          cading_End_Devices\IAR\Configuration\End_Device\s /
//                          mpl_config.dat (-DNUM_CONNECTIONS=2               /
//                          -DSIZE_INFRAME_Q=5 -DSIZE_OUTFRAME_Q=1            /
//                          -DEND_DEVICE -DFWVERSION=2) -f                    /
//                          E:\linear-wireless\Projects\Examples\SRF04\Cascad /
//                          ing_End_Devices\IAR\Configuration\smpl_nwk_config /
//                          .dat (-DMAX_HOPS=3 -DMAX_HOPS_FROM_ME=3           /
//                          -DCOMMAND_SIZE=10 -DLOGTEMP_SIZE=100              /
//                          -DMAX_HOPS_FROM_AP=1 -DMAX_NWK_PAYLOAD=34         /
//                          -DMAX_APP_PAYLOAD=50 -DDEFAULT_LINK_TOKEN=0x01020 /
//                          304 -DDEFAULT_JOIN_TOKEN=0x05060708               /
//                          -DxFREQUENCY_AGILITY -DAPP_AUTO_ACK               /
//                          -DxEXTENDED_API -DxSMPL_SECURE                    /
//                          -DxNVOBJECT_SUPPORT -DxSW_TIMER                   /
//                          -DxFREQUENCY_HOPPING -DNWK_PLL_REFERENCE_CLOCK    /
//                          -DBSP_TIMER_USED=1 -DNWK_PLL_SHOW_LOCATION_INDICA /
//                          TORS -DUART_NUMBER=UART_NUMBER_0                  /
//                          -DUART_LOCATION=UART_LOCATION_1                   /
//                          -DUART_BAUD_RATE=19200 -DUART_FLOW_CONTROL=UART_F /
//                          LOW_CONTROL_OFF -DUART_PARITY_MODE=UART_PARITY_NO /
//                          NE -DUART_STOP_BITS=UART_1_STOP_BIT -DCOMDEBUG)   /
//                          -DLOGINFO E:\linear-wireless\Components\simplicit /
//                          i\nwk\nwk_frame.c -D MCU_H=<ioCC1110.h> -D        /
//                          MRFI_CC1110 -lb E:\linear-wireless\Projects\Examp /
//                          les\SRF04\Cascading_End_Devices\IAR\CC1110-EndDev /
//                          ice\List\ -o E:\linear-wireless\Projects\Examples /
//                          \SRF04\Cascading_End_Devices\IAR\CC1110-EndDevice /
//                          \Obj\ -e --debug --core=plain --dptr=16,1         /
//                          --data_model=large --code_model=near              /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 8 -I     /
//                          E:\linear-wireless\Projects\Examples\SRF04\Cascad /
//                          ing_End_Devices\IAR\..\..\..\..\..\Components\bsp /
//                          \ -I E:\linear-wireless\Projects\Examples\SRF04\C /
//                          ascading_End_Devices\IAR\..\..\..\..\..\Component /
//                          s\bsp\drivers\ -I E:\linear-wireless\Projects\Exa /
//                          mples\SRF04\Cascading_End_Devices\IAR\..\..\..\.. /
//                          \..\Components\bsp\boards\SRF04EB\ -I             /
//                          E:\linear-wireless\Projects\Examples\SRF04\Cascad /
//                          ing_End_Devices\IAR\..\..\..\..\..\Components\mrf /
//                          i\ -I E:\linear-wireless\Projects\Examples\SRF04\ /
//                          Cascading_End_Devices\IAR\..\..\..\..\..\Componen /
//                          ts\SimpliciTI\nwk\ -I E:\linear-wireless\Projects /
//                          \Examples\SRF04\Cascading_End_Devices\IAR\..\..\. /
//                          .\..\..\Components\SimpliciTI\nwk_applications\   /
//                          -I E:\linear-wireless\Projects\Examples\SRF04\Cas /
//                          cading_End_Devices\IAR\..\..\..\..\..\Components\ /
//                          ApplicationFramework\ -Ohz                        /
//    List file          =  E:\linear-wireless\Projects\Examples\SRF04\Cascad /
//                          ing_End_Devices\IAR\CC1110-EndDevice\List\nwk_fra /
//                          me.s51                                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME nwk_frame

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC MRFI_RxCompleteISR
        PUBLIC nwk_buildAckReqFrame
        PUBLIC nwk_buildFrame
        PUBLIC nwk_frameInit
        PUBLIC nwk_getMyRxType
        PUBLIC nwk_retrieveFrame
        PUBLIC nwk_sendAckReply
        PUBLIC nwk_sendFrame
        PUBLIC roomFlag

        EXTERN nwk_getMyAddress
        EXTERN MRFI_RandomByte
        EXTERN nwk_QfindSlot
        EXTERN memcpy
        EXTERN MRFI_Receive
        EXTERN nwk_QfindOldest
        EXTERN nwk_getConnInfo
        EXTERN nwk_QadjustOrder
        EXTERN memcmp
        EXTERN nwk_isConnectionValid
        EXTERN MRFI_Transmit
        EXTERN nwk_processFreq
        EXTERN nwk_processJoin
        EXTERN nwk_processLink
        EXTERN nwk_processMgmt
        EXTERN nwk_processPing
        EXTERN nwk_processSecurity


        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
func:
        DS 12
        REQUIRE `?<Initializer for func>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
sTRACTID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
sMyAddr:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
sMyRxType:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
sMyTxType:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
spCallback:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_frameInit:
        CODE
        PUSH    DPL
        PUSH    DPH
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#sMyTxType
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#spCallback
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function nwk_getMyAddress
        LCALL   nwk_getMyAddress
        MOV     DPTR,#sMyAddr
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
??nwk_frameInit_0:
        ; Setup parameters for call to function MRFI_RandomByte
        LCALL   MRFI_RandomByte
        MOV     A,R1
        MOV     DPTR,#sTRACTID
        MOVX    @DPTR,A
        JZ      ??nwk_frameInit_0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine0:
        POP     DPH
        POP     DPL
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_buildFrame:
        CODE
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        ; Setup parameters for call to function nwk_QfindSlot
        MOV     R1,#0x2
        LCALL   nwk_QfindSlot
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??nwk_buildFrame_0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??nwk_buildFrame_1
??nwk_buildFrame_0:
        MOV     A,#0x5
        ADD     A,?V0 + 0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x5
        LCALL   ?Subroutine5
??CrossCallReturnLabel_2:
        ANL     A,#0x80
        ORL     A,?V0 + 4
        MOVX    @DPTR,A
        MOV     DPTR,#sTRACTID
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
??nwk_buildFrame_2:
        MOV     DPTR,#sTRACTID
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        JZ      ??nwk_buildFrame_2
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        LCALL   ?Subroutine9
??CrossCallReturnLabel_10:
        MOV     R4,A
        MOVX    A,@DPTR
        ORL     A,R4
        ANL     A,#0xf8
        ORL     A,?V0 + 1
        ANL     A,#0x77
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.7
        MOVX    @DPTR,A
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,R6
        ADD     A,#0x8
        INC     R2
        INC     R2
        LCALL   ?Subroutine6
??CrossCallReturnLabel_4:
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        LCALL   ?Subroutine8
??CrossCallReturnLabel_8:
        LCALL   ?Subroutine6
??CrossCallReturnLabel_5:
        LCALL   ?DEALLOC_XSTACK8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
??nwk_buildFrame_1:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine1:
        MOV     R7,#0x8
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine6:
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??Subroutine12_0
??CrossCallReturnLabel_16:
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_buildAckReqFrame:
        CODE
        MOV     A,#-0xd
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 13
        ; Auto size: 0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        ; Setup parameters for call to function nwk_buildFrame
        LCALL   nwk_buildFrame
        MOV     ?V0 + 3,R3
        MOV     R1,?V0 + 3
        MOV     A,R2
        ORL     A,R1
        JNZ     ??nwk_buildAckReqFrame_0
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??nwk_buildAckReqFrame_1
??nwk_buildAckReqFrame_0:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.7
        MOVX    @DPTR,A
??nwk_buildAckReqFrame_1:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine2:
        MOV     R7,#0x6
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG XDATA_I:XDATA:NOROOT(0)
roomFlag:
        DATA8
        DS 1
        REQUIRE `?<Initializer for roomFlag>`
        REQUIRE __INIT_XDATA_I

        RSEG NEAR_CODE:CODE:NOROOT(0)
MRFI_RxCompleteISR:
        CODE
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 0
        ; Setup parameters for call to function nwk_QfindSlot
        MOV     R1,#0x1
        LCALL   nwk_QfindSlot
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??MRFI_RxCompleteISR_0
        ; Setup parameters for call to function MRFI_Receive
        MOV     A,R6
        ADD     A,#0x2
        INC     R2
        INC     R2
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   MRFI_Receive
        ; Setup parameters for call to function dispatchFrame
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   dispatchFrame
        SJMP    ??MRFI_RxCompleteISR_1
??MRFI_RxCompleteISR_0:
        MOV     DPTR,#roomFlag
        CLR     A
        MOVX    @DPTR,A
??MRFI_RxCompleteISR_1:
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine3:
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_retrieveFrame:
        CODE
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 15
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function nwk_QfindOldest
        MOV     R4,#0x1
        MOV     R1,#0x1
        LCALL   nwk_QfindOldest
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??nwk_retrieveFrame_0
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??nwk_retrieveFrame_1
        ; Setup parameters for call to function nwk_getConnInfo
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   nwk_getConnInfo
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??nwk_retrieveFrame_1
        MOV     R1,#0x2
        LJMP    ??nwk_retrieveFrame_2
??nwk_retrieveFrame_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#-0x5
        MOV     ?V0 + 2,A
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    @DPTR,A
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,R6
        ADD     A,#0x8
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7
??CrossCallReturnLabel_6:
        LCALL   ?DEALLOC_XSTACK8
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??nwk_retrieveFrame_3
        MOV     A,R6
        ADD     A,#0x3a
        LCALL   ?Subroutine4
??CrossCallReturnLabel_0:
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x3b
        LCALL   ?Subroutine4
??CrossCallReturnLabel_1:
        INC     DPTR
        MOVX    @DPTR,A
??nwk_retrieveFrame_3:
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??nwk_retrieveFrame_4
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,R6
        ADD     A,#0x4
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7
??CrossCallReturnLabel_7:
        LCALL   ?DEALLOC_XSTACK8
??nwk_retrieveFrame_4:
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      ??nwk_retrieveFrame_5
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    @DPTR,A
??nwk_retrieveFrame_5:
        ; Setup parameters for call to function nwk_QadjustOrder
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   nwk_QadjustOrder
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,A
        SJMP    ??nwk_retrieveFrame_2
??nwk_retrieveFrame_0:
        MOV     R1,#0x4
??nwk_retrieveFrame_2:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        LJMP    ?Subroutine1

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine7:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??Subroutine12_0
??CrossCallReturnLabel_17:
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine11:
        MOV     R2,DPL
        MOV     R3,DPH
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG NEAR_CODE:CODE:NOROOT(0)
??Subroutine12_0:
        LCALL   memcpy
        MOV     A,#0x2
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine4:
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
dispatchFrame:
        CODE
        MOV     A,#-0xd
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 13
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        ADD     A,#0x5
        MOV     ?V0 + 2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     DPL,?V0 + 2
        MOV     DPH,A
        MOVX    A,@DPTR
        ANL     A,#0x3f
        MOV     ?V0 + 0,A
        ; Setup parameters for call to function memcmp
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        LCALL   ?Subroutine8
??CrossCallReturnLabel_9:
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   memcmp
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        MOV     ?V0 + 5,R3
        MOV     A,R2
        ORL     A,?V0 + 5
        JNZ     ??dispatchFrame_0
??dispatchFrame_1:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
??dispatchFrame_2:
        MOVX    @DPTR,A
        LJMP    ??dispatchFrame_3
??dispatchFrame_0:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??dispatchFrame_1
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,?V0 + 0
        JZ      ??dispatchFrame_4
        CLR     C
        SUBB    A,#0x7
        JNC     ??dispatchFrame_5
        ; Setup parameters for indirect call
        MOV     A,?V0 + 0
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,#(func + 254) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((func - 2) >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??dispatchFrame_1
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x1
        SJMP    ??dispatchFrame_2
??dispatchFrame_5:
        MOV     A,#0x3f
        XRL     A,?V0 + 0
        JZ      ??dispatchFrame_6
??dispatchFrame_4:
        MOV     A,#-0x20
        ADD     A,?V0 + 0
        CLR     C
        SUBB    A,#0x1f
        JNC     ??dispatchFrame_1
??dispatchFrame_6:
        ; Setup parameters for call to function nwk_isConnectionValid
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   nwk_isConnectionValid
        MOV     A,R1
        JZ      ??dispatchFrame_1
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#spCallback
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??dispatchFrame_3
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#spCallback + 1
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     A,R1
        JZ      $+5
        LJMP    ??dispatchFrame_1
??dispatchFrame_3:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        LJMP    ?Subroutine2

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine8:
        MOV     DPTR,#sMyAddr
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x4
        MOV     R2,A
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_sendFrame:
        CODE
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R1
        MOV     A,R6
        ADD     A,#0x6
        LCALL   ?Subroutine5
??CrossCallReturnLabel_3:
        LCALL   ?Subroutine10
??CrossCallReturnLabel_12:
        MOV     R2,A
        MOVX    A,@DPTR
        ORL     A,R2
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function MRFI_Transmit
        MOV     R1,?V0 + 0
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   MRFI_Transmit
        MOV     A,R1
        JNZ     ??nwk_sendFrame_0
        MOV     R1,#0x0
        SJMP    ??nwk_sendFrame_1
??nwk_sendFrame_0:
        MOV     R1,#0x9
??nwk_sendFrame_1:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine5:
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_getMyRxType:
        CODE
        PUSH    DPL
        PUSH    DPH
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#sMyRxType
        MOVX    A,@DPTR
        MOV     R1,A
        LJMP    ?Subroutine0

        RSEG NEAR_CODE:CODE:NOROOT(0)
nwk_sendAckReply:
        CODE
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        ; Saved register size: 9
        ; Auto size: 58
        MOV     A,#-0x3a
        LCALL   ?ALLOC_XSTACK8
        MOV     A,R1
        MOV     R6,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        LCALL   ?Subroutine10
??CrossCallReturnLabel_13:
        MOV     R0,A
        MOVX    A,@DPTR
        ORL     A,R0
        LCALL   ?Subroutine9
??CrossCallReturnLabel_11:
        MOV     R0,A
        MOVX    A,@DPTR
        ORL     A,R0
        PUSH    A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     A,R2
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11
??CrossCallReturnLabel_14:
        LCALL   ?DEALLOC_XSTACK8
        ; Setup parameters for call to function memcpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        MOV     DPTR,#sMyAddr
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11
??CrossCallReturnLabel_15:
        LCALL   ?DEALLOC_XSTACK8
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0xc0
        ORL     A,R6
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x5
        MOVX    @DPTR,A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x7b
        MOVX    @DPTR,A
        ORL     A,#0xb
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x3f
        MOVX    @DPTR,A
        ; Setup parameters for call to function MRFI_Transmit
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   MRFI_Transmit
        MOV     A,#0x3a
        LCALL   ?DEALLOC_XSTACK8
        LJMP    ?Subroutine3

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine10:
        ANL     A,#0xcf
        MOV     DPH,#(sMyTxType >> 8) & 0xff
        MOV     DPL,#sMyTxType & 0xff
        RET

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine9:
        ANL     A,#0xbf
        MOV     DPH,#(sMyRxType >> 8) & 0xff
        MOV     DPL,#sMyRxType & 0xff
        RET

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for func>`:
        DATA16
        DW nwk_processPing
        DW nwk_processLink
        DW nwk_processJoin
        DW nwk_processSecurity
        DW nwk_processFreq
        DW nwk_processMgmt

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for roomFlag>`:
        DATA8
        DB 1

        END
// 
// 1 195 bytes in segment NEAR_CODE
//    13 bytes in segment XDATA_I
//    13 bytes in segment XDATA_ID
//     7 bytes in segment XDATA_Z
// 
// 1 208 bytes of CODE  memory
//    20 bytes of XDATA memory
//
//Errors: none
//Warnings: none
